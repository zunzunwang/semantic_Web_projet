package semweb;

import java.rmi.RemoteException;

import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.vocabulary.RDF;
import com.hp.hpl.jena.vocabulary.RDFS;

public class PersonDataImpl implements PersonData {
	protected PersonDataImpl() throws RemoteException {
		super();
		// TODO Auto-generated constructor stub
	}

	@Override
	public String name(RDFNode person, Model model) {
		// TODO Auto-generated method stub
		String foaf= "http://xmlns.com/foaf/0.1/";
		String schema ="http://schema.org/";
		model.setNsPrefix("foaf", foaf);
		model.setNsPrefix("schema", schema);
		Property name_foaf_name = model.createProperty(foaf+"name");
		Property name_schema_name = model.createProperty(schema+"name");
		Property name_foaf_firstname = model.createProperty(foaf+"firstName");
		Property name_schema_givenName = model.createProperty(schema+"givenName");
		Property name_foaf_lastname = model.createProperty(foaf+"lastName");
		Property name_schema_familyName = model.createProperty(schema+"familyName");
		StmtIterator iter_first_name;
		StmtIterator iter_last_name;

		
		RDFNode r;
		String name = null;
		StmtIterator iter = model.listStatements((Resource) person,name_foaf_name,(RDFNode)null );
		if (iter.hasNext()) {
			System.out.println("The model contains foaf:name :");
				 r = iter.nextStatement().getObject();
				 System.out.println("  " + r);
				 name =r.toString();
		}else{
			iter = model.listStatements((Resource) person,name_schema_name,(RDFNode)null );			
//            System.out.println("No rdf:type were found in the model");
			if (iter.hasNext()) {
				System.out.println("The model contains schema:name :");
				 r = iter.nextStatement().getObject();
				 System.out.println("  " + r);
				 name =r.toString();
				 }else{
					 iter_first_name = model.listStatements((Resource) person,name_foaf_firstname,(RDFNode)null );
					 iter_last_name = model.listStatements((Resource) person,name_foaf_lastname,(RDFNode)null );
					 if(iter_first_name.hasNext()||iter_last_name.hasNext()){
						System.out.println("The model contains foaf:firstname + foaf:lastname :");
						 name = iter_first_name.nextStatement().getObject().toString()+" "+iter_last_name.nextStatement().getObject().toString();
						 System.out.println("  " + name);
					 }else{
						 iter_first_name = model.listStatements((Resource) person,name_schema_givenName,(RDFNode)null );
						 iter_last_name = model.listStatements((Resource) person,name_schema_familyName,(RDFNode)null );
						 if(iter_first_name.hasNext()||iter_last_name.hasNext()){
								System.out.println("The model contains schema:givenName + schema:familyName :");
								 name = iter_first_name.nextStatement().getObject().toString()+" "+iter_last_name.nextStatement().getObject().toString();
								 System.out.println("  " + name);
							 }else{
									iter = model.listStatements((Resource) person,RDFS.label,(RDFNode)null );
									if (iter.hasNext()) {
										System.out.println("The model contains rdfs:label :");
										 r = iter.nextStatement().getObject();
										 System.out.println("  " + r);
										 name =r.toString();
										 }																	 
							 }						 
					 }
				 }
        }
		return name;		 
	}


	@Override
	public String birth(RDFNode person, Model model) {
		// TODO Auto-generated method stub
		String dbo = "http://dbpedia.org/ontology/";
		String vcard ="http://www.w3.org/2006/vcard/ns#";
		String schema ="http://schema.org/";
		model.setNsPrefix("dbo", dbo);
		model.setNsPrefix("vcard", vcard);
		model.setNsPrefix("schema", schema);
		Property birth_dbo = model.createProperty(dbo+"birthDate");
		Property birth_vcard = model.createProperty(vcard+"bday");
		Property name_schema_givenName = model.createProperty(schema+"birthDate");
		
		RDFNode r;
		String birthday = null;
		StmtIterator iter_birth = model.listStatements((Resource) person,birth_dbo,(RDFNode)null );
		if (iter.hasNext()) {
			System.out.println("The model contains birth_dbo :");
				 r = iter.nextStatement().getObject();
				 System.out.println("  " + r);
				 birthday =r.toString();
		}else{
			iter = model.listStatements((Resource) person,birth_vcard,(RDFNode)null );			
//            System.out.println("No rdf:type were found in the model");
			if (iter.hasNext()) {
				System.out.println("The model contains birth_vcard :");
				 r = iter.nextStatement().getObject();
				 System.out.println("  " + r);
				 birthday =r.toString();
				 }else{
					 iter_first_name = model.listStatements((Resource) person,name_foaf_firstname,(RDFNode)null );
					 iter_last_name = model.listStatements((Resource) person,name_foaf_lastname,(RDFNode)null );
					 if(iter_first_name.hasNext()||iter_last_name.hasNext()){
						System.out.println("The model contains foaf:firstname + foaf:lastname :");
						 name = iter_first_name.nextStatement().getObject().toString()+" "+iter_last_name.nextStatement().getObject().toString();
						 System.out.println("  " + name);
					 }else{
						 iter_first_name = model.listStatements((Resource) person,name_schema_givenName,(RDFNode)null );
						 iter_last_name = model.listStatements((Resource) person,name_schema_familyName,(RDFNode)null );
						 if(iter_first_name.hasNext()||iter_last_name.hasNext()){
								System.out.println("The model contains schema:givenName + schema:familyName :");
								 name = iter_first_name.nextStatement().getObject().toString()+" "+iter_last_name.nextStatement().getObject().toString();
								 System.out.println("  " + name);
							 }else{
									iter = model.listStatements((Resource) person,RDFS.label,(RDFNode)null );
									if (iter.hasNext()) {
										System.out.println("The model contains rdfs:label :");
										 r = iter.nextStatement().getObject();
										 System.out.println("  " + r);
										 name =r.toString();
										 }																	 
							 }						 
					 }
				 }
        }
		return name;		 
	}

	@Override
	public String death(RDFNode person, Model model) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String picture(RDFNode person, Model model) {
		// TODO Auto-generated method stub
		return null;
	}

}
