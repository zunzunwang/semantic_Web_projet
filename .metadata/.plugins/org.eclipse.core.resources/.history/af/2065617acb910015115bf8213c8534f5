package semweb;

import java.util.Collection;
import java.util.HashSet;

import org.semarglproject.jena.rdf.rdfa.JenaRdfaReader;

import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.vocabulary.RDF;

public class PersonExtractor extends  RDFExtractor  {

	@Override
	public RDFNode primaryTopic(String iri) {
		// TODO Auto-generated method stub
		JenaRdfaReader.inject();
		Model m = null;
		RDFNode list_resource;
		RDFNode r;				
		try {
			m = ModelFactory.createDefaultModel();
			m.read(iri,"TTL");			
		} catch ( org.apache.jena.riot.RiotException e) {
			// TODO Auto-generated catch block			
			try {
				m = ModelFactory.createDefaultModel();
				m.read(iri,"RDF/XML");				
				} catch ( org.apache.jena.riot.RiotException a) {
					// TODO Auto-generated catch block
					try {
						m = ModelFactory.createDefaultModel();
						m.read(iri,"RDFA");	
						} catch ( org.apache.jena.riot.RiotException c) {
							c.printStackTrace();							
						}
					}
			}finally{
//				m.write(System.out);
			}
		Resource subject = m.createResource(iri);							
		StmtIterator iter = m.listStatements(subject,RDF.type,(RDFNode)null );
		if (iter.hasNext()) {
			System.out.println("The model contains those rdf:type :");
//			int n=0;
			 while (iter.hasNext()) {
				 r = iter.nextStatement().getObject();
//				 System.out.println("  " + r);
				 String resource =r.toString();
				 list_resource.add(resource);
//				 n++;
//				 System.out.println(n);
			 }
			 
		}else {
            System.out.println("No rdf:type were found in the model");
        }
		
		for(String i:list_resource ){
			System.out.println(i);			
		}
		return list_resource;		 
	}


}
